27. Remove Element

https://leetcode.com/problems/remove-element/description/?envType=study-plan-v2&envId=top-interview-150

Given an integer array nums and an integer val, remove all occurrences of val in nums in-place.
The order of the elements may be changed.
Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k,
to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the elements which
are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.



Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).


Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100

Accepted Solution::

public int removeElement(int[] nums, int val) {

        int firstIndex = 0;
        int lastIndex = nums.length-1;

        while(firstIndex <= lastIndex){
            while(lastIndex >= 0 && nums[lastIndex] == val){
                lastIndex--;
            }
            if(firstIndex <= lastIndex){
                if(nums[firstIndex] == val){
                    int temp = nums[firstIndex];
                    nums[firstIndex] = nums[lastIndex];
                    nums[lastIndex] = temp;
                    lastIndex--;
                }
                firstIndex++;
            }

        }
        return firstIndex;
    }

    More Optimised Solution ::

    Your code for removing elements from an array is already quite efficient.
    However, you can make it slightly cleaner and more readable by simplifying some parts.
    Here's an optimized version of the code:

    public int removeElement(int[] nums, int val) {
        int index = 0; // This will keep track of the position for non-val elements

        // Traverse the array
        for (int i = 0; i < nums.length; i++) {
            // If the current element is not equal to the value to be removed
            if (nums[i] != val) {
                nums[index] = nums[i]; // Place it at the 'index' position
                index++; // Move to the next position
            }
        }

        return index; // The new length of the array with elements != val
    }

Changes and Improvements:
Simplified Loop: Use a single loop to traverse the array rather than using two while loops.
Single Index Tracking: Use a single index variable to keep track of the position for non-val elements.
Direct Placement: Place elements directly into their new positions without swapping, which reduces the number of operations.
This approach ensures that the array is traversed only once, making it efficient and straightforward.